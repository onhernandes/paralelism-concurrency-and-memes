Paralelismo, NodeJS, bugs e StarWars: uma história de amor, ódio e muito hotfix.

-> problem:

Let's assume you had some enormous bug in production, but was easily solved. There was corrupted data and you wrote a simple script to fix this, but mostly, this kind of fix may envolve doing requests, CPU work and etc. Ok, but it works, right? There's other "problem": running row per row in a table which contains billions of rows will take sometime, which probably you do not have, because the corrupted data is going on live and users need this right now.

-> solution:

So, do you have a minute for parallelism in NodeJS?
It's simpler than you could think, and no, you won't have to depend over NPM modules. NodeJS provides a native module for ~building your own Death Star~ *clustering* tasks, like, sending ~stormtrooppers to war~ commands to other instances of your script through process in core.

-> quick explanation

What the hell is parallelism/parallelism?

As Wikipedia says, you basically executes the same task over each CPU core, at the same time. Let me put it simpler: each core of your server is a Stormtrooper and you just send commands to them. They can do the same thing, just like you said, or do absolutely nothing.

NodeJS-clustered process shares the same TCP connection, like, they can listen to the same port for HTTP requests.

-> example with http server

<!-- http server example -->

-> building your own death star

- Talking to a commander
- Makes the commander throws some shit over stormtroppers
- Kill them when necessary
- Order new ones when someone dies
- Preparing the stormtroopers to receive messages/commands
